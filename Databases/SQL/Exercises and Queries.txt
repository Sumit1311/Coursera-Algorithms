/* Delete the tables if they already exist */
drop table if exists Movie;
drop table if exists Reviewer;
drop table if exists Rating;

/* Create the schema for our tables */
create table Movie(mID int, title text, year int, director text);
create table Reviewer(rID int, name text);
create table Rating(rID int, mID int, stars int, ratingDate date);

/* Populate the tables with our data */
insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');




1. Find the titles of all movies directed by Steven Spielberg
	select title from movie where director='Steven Spielberg';

2. Find all years that have a movie that received a rating of 4 or 5, and 		sort them in increasing order
	select distinct year
	from movie natural join rating
	where stars = 4 or stars = 5
	order by year;

3. Find the titles of all movies that have no ratings. 
	select title
	from movie left outer join rating 
	on movie.mID = rating.mID
	where stars is null
4. Some reviewers didn't provide a date with their rating. Find the names 	   of all reviewers who have ratings with a NULL value for the date. 
	select reviewer.name
	from movie natural join rating natural join reviewer
	where ratingDate is null;

5. Write a query to return the ratings data in a more readable format: 			reviewer name, movie title, stars, and ratingDate. Also, sort the data, 	first by reviewer name, then by movie title, and lastly by number of 		stars. 
	select name,title,stars,ratingDate
	from movie natural join rating natural join reviewer
	order by name,title,stars

6. For all cases where the same reviewer rated the same movie twice and  	gave it a higher rating the second time, return the reviewer's name
	and the title of the movie. 
	select name,title
	from (select r1.rID,r1.mID from rating r1,rating r2 where r1.mID = r2.mID AND r1.rID = r2.rID AND r1.stars < r2.stars AND r1.ratingDate < r2.ratingDate) v1 natural join reviewer natural join movie;

7. For each movie that has at least one rating, find the highest number 	of stars that movie received. Return the movie title and number of 		stars. Sort by movie title. 
	select title,mstars
	from (select mID,max(stars) as mstars
	from movie natural join rating
	group by mID) m natural join movie
	order by title

8. List movie titles and average ratings, from highest-rated to lowest-		rated. If two or more movies have the same average rating, list them 	in alphabetical order.
	select title,astars
	from (select mID,avg(stars) as astars
	from movie natural join rating
	group by mID) m natural join movie
	order by astars desc,title

 * 9. Find the names of all reviewers who have contributed three or more 		ratings. (As an extra challenge, try writing the query without HAVING 	or without COUNT.) 
	select name
	from(select rID
		from rating
		group by rID
		having count(mID) >=3) m natural join reviewer;

	select distinct name
	from (reviewer natural join rating ) r
	where 3 <= (select count(r1.rID)
				from rating r1
				where r.rID = r1.rID)


10. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 


select title,spread
from (select mID, (max(stars) - min(stars)) as spread
from movie natural join rating
group by mID) m join movie using(mID);

11. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 

select distinct  ((select avg(mavg)
from ((select mID,avg(stars) as mavg
from rating
group by mID) m natural join movie) am
where year < 1980) - 
(select avg(mavg)
from ((select mID,avg(stars) as mavg
from rating
group by mID) m natural join movie) am
where year > 1980)) as difference
from movie;

12. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 

select director,title
from (select director
from movie
group by director
having count(mID) > 1) m join movie using(director)

* 13. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)


select title
from (
(select mID, avg(stars) as mavg
from movie natural join rating
group by mID) m join movie using(mID))
where m.mavg >= (select max(m1.mavg)
from (select mID, avg(stars) as mavg
from movie natural join rating
group by mID) m1);

* 14. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 

select title
from (
(select mID, avg(stars) as mavg
from movie natural join rating
group by mID) m join movie using(mID))
where m.mavg <= (select min(m1.mavg)
from (select mID, avg(stars) as mavg
from movie natural join rating
group by mID) m1);

* 15. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

	select distinct title,director
	from (select director, max(stars) as maxstars
	from movie natural join rating
	where director is not null
	group by director) m join movie using(director) natural join rating
	where m.maxstars = stars

16. Find the names of all reviewers who rated Gone with the Wind.

	select distinct name
	from movie natural join rating natural join reviewer
	where title = 'Gone with the Wind'

17. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

	select name,title,stars
	from movie natural join rating natural join reviewer
	where name=director

18. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

	select *
	from (select distinct name as list
	from reviewer
	union
	select distinct title as list
	from movie) as m
	order by list

* 19. Find the titles of all movies not reviewed by Chris Jackson. 
	select distinct title
	from movie
	except
	select distinct title
	from movie natural join rating natural join reviewer
	where name = 'Chris Jackson'

* 20. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. 

	select distinct r1.name, r2.name
	from (rating natural join reviewer) r1,(rating natural join reviewer) r2
	where r1.mID = r2.mID and
		r1.name < r2.name

21. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. 
	select name,title,stars
	from movie natural join reviewer natural join rating
	where stars = (select min(stars)
	from rating)
	 